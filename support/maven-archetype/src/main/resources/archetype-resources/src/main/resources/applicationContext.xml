#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="${package}">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"> 
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
		<property name="packagesToScan" value="${package}"/>
		<property name="jpaProperties">
			<props>
				<!-- 命名规则 My_NAME->MyName -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
			</props>
		</property>
	</bean>
	
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<bean factory-method="getDialect" class="org.springside.modules.persistence.Hibernates">
				<constructor-arg ref="dataSource"/>
			</bean>
		</property>
	</bean>

	<!-- Spring Data Jpa配置 -->
 	<jpa:repositories base-package="${package}"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>
   
	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
 	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	
	<!-- production环境 -->
 	<beans>
 		<context:property-placeholder ignore-unresolvable="true"
			location="classpath*:/application.properties" />	
		
		<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
		<!--<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">-->
			<!--&lt;!&ndash; Connection Info &ndash;&gt;-->
			<!--<property name="driverClassName" value="${symbol_dollar}{jdbc.driver}" />-->
			<!--<property name="url" value="${symbol_dollar}{jdbc.url}" />-->
			<!--<property name="username" value="${symbol_dollar}{jdbc.username}" />-->
			<!--<property name="password" value="${symbol_dollar}{jdbc.password}" />-->
		<!---->
			<!--&lt;!&ndash; Connection Pooling Info &ndash;&gt;-->
			<!--<property name="maxActive" value="${symbol_dollar}{jdbc.pool.maxActive}" />-->
			<!--<property name="maxIdle" value="${symbol_dollar}{jdbc.pool.maxIdle}" />-->
			<!--<property name="minIdle" value="0" />-->
			<!--<property name="defaultAutoCommit" value="false" />-->
		<!--</bean>-->
		<!-- 数据源配置, 使用druid连接池 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<!-- 基本属性 url、user、password -->
			<property name="url" value="${symbol_dollar}{jdbc.url}" />
			<property name="username" value="${symbol_dollar}{jdbc.username}" />
			<property name="password" value="${symbol_dollar}{jdbc.password}" />
			<!-- 配置初始化大小、最小、最大 -->
			<property name="initialSize" value="0" />
			<property name="minIdle" value="0" />
			<property name="maxActive" value="${symbol_dollar}{jdbc.pool.maxActive}" />
			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="60000" />
			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />
			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
			<property name="poolPreparedStatements" value="false" />
			<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="stat,log4j,wall" />
		</bean>

		
		<!-- 数据源配置,使用应用服务器的数据库连接池 -->
		<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->
	</beans>

</beans>